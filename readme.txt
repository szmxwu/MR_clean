# MRIclean - MRI序列数据治理软件

## 项目概述

MRIclean 是一个用于 MRI（磁共振成像）数据协议标准化与设备使用分析的工具链，旨在将原始 MRI 数据进行标准化处理、治理修正、自动化分析并生成结构化报告。

### 目标用户
- 医疗影像研究人员
- 放射科医生
- 数据分析人员

### 解决的核心问题
1. MRI 数据格式不统一，难以进行大规模分析
2. 缺乏统一的协议标准，导致设备使用和数据解读存在差异
3. 人工参与数据治理效率低，易出错

## 系统功能

### 主要功能
1. **数据标准化**：对原始 CSV/XLSX 数据进行物理特征提取和初步标准化
2. **人机协作修正**：结合先验知识模板与专家知识注入，修正数据中的不一致
3. **自动化分析**：基于核心协议库生成结构化"发现"列表
4. **报告生成**：输出 HTML 格式的最终分析报告

### 关键特性
- 多阶段处理流程（4个阶段）
- 支持先验知识配置与专家反馈
- 结构化输出与可视化报告

## 技术架构

### 整体架构
单体式命令行工具 + 配置文件驱动的流程控制

### 关键技术
- Python 3.x 脚本实现核心处理逻辑
- 依赖配置文件进行参数控制
- 利用 JSON 文件作为协议知识库

### 主要组件
- `MR_clean.py`：主数据清洗和分类脚本
- `generate_priors.py`：生成解剖先验知识
- `anatomical_priors_config.py`：解剖先验知识配置文件
- `core_protocols.json`：核心协议库
- `interAccreditation.py`：设备间认证或标准化处理
- `preprocess.py`：数据预处理脚本
- `Str_proprocess.py`：字符串预处理
- `getSeriesInfo.py`：获取序列信息
- `flashtext/keyword.py`：关键词提取模块
- `knowledge_graph/`：知识图谱相关配置
- `parameter_config/`：参数配置文件
- `static/`：静态资源（Swagger UI）

## 系统工作流程

```
┌─────────────────────────────────────────────────────────────────────────────┐
│                              MRIclean 工作流程                              │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│ 第一阶段：数据准备与标准化                                                  │
└─────────────────────────────────────────────────────────────────────────────┘
                    ┌──────────────────────────────┐
                    │   原始数据 (CSV/XLSX)        │
                    └──────────────────────────────┘
                               │
                    ┌──────────────────────────────┐
                    │  运行初步标准化脚本          │
                    │  (物理特征提取)              │
                    └──────────────────────────────┘
                               │
                    ┌──────────────────────────────┐
                    │   初步标准化数据             │
                    └──────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│ 第二阶段：数据治理与修正 (人机协作)                                         │
└─────────────────────────────────────────────────────────────────────────────┘
                               │
                    ┌──────────────────────────────┐
                    │   generate_priors.py         │
                    └──────────────────────────────┘
                               │
                    ┌──────────────────────────────┐
                    │ 先验知识模板 (待填写)        │
                    └──────────────────────────────┘
                      ┌─────┐        ┌──────────────────────────────┐
                      │     ├────────┤ 专家知识注入 (人工)          │
                      └─────┘        └──────────────────────────────┘
                               │
                    ┌──────────────────────────────┐
                    │ 先验知识字典 (已配置)        │
                    └──────────────────────────────┘
                               │
                    ┌──────────────────────────────┐
                    │  运行部位归属修正            │
                    └──────────────────────────────┘
                               │
                    ┌──────────────────────────────┐
                    │   最终干净数据               │
                    └──────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│ 第三阶段：自动化分析与发现                                                  │
└─────────────────────────────────────────────────────────────────────────────┘
                               │
         ┌──────────────────────────────┐
         │ 核心协议库 (.json)           │
         └──────────────────────────────┘
                      │         │
                      │  ┌──────────────────────────────┐
                      └──┤ generate_findings_report     │
                         └──────────────────────────────┘
                                   │
                         ┌──────────────────────────────┐
                         │ 结构化"发现"列表             │
                         └──────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│ 第四阶段：报告生成                                                          │
└─────────────────────────────────────────────────────────────────────────────┘
                                   │
                         ┌──────────────────────────────┐
                         │   生成HTML报告               │
                         └──────────────────────────────┘
                                   │
                         ┌──────────────────────────────┐
                         │ 最终分析报告.html            │
                         └──────────────────────────────┘
```

## 详细处理流程说明

### MR_clean.py 处理流程

1. **阶段一：提取原子特征**
   - 方位标准化 (standardOrientation)：通过ImageOrientationPatient计算或协议名回退确定扫描方位
   - 维度标准化 (standardDimension)：从MRAcquisitionType提取维度信息
   - 技术特征提取：
     - 脂肪抑制检测 (isFatSuppressed)
     - 对比增强检测 (isContrastEnhanced)
     - 运动校正检测 (hasMotionCorrection)
   - 图像类型精化 (refinedImageType)

2. **阶段二：提取硬件环境与高级参数特征**
   - 磁场强度标准化 (standardFieldStrength)
   - 制造商标准化 (standardManufacturer)
   - 设备型号清理 (cleanedModelName)

3. **阶段三：序列分类**
   - 基于物理参数和名称规则对序列进行分类
   - 支持T1/T2/FLAIR/DWI等多种序列类型识别
   - 处理Dixon序列等多输出序列的亚型区分

4. **阶段四：动态序列分析**
   - 识别动态增强扫描序列
   - 自动推断增强时相（PRE、POST_1、POST_2等）
   - 基于时间戳和空间位置精确匹配动态序列组

5. **阶段五：传播增强状态**
   - 识别单次延迟增强序列
   - 传播增强状态到后续T1加权序列

### generate_priors.py 处理流程

1. 读取标准化的MRI序列文件
2. 通过空间聚类分析多部位研究
3. 生成可配置的"先验知识"字典
4. 保存到anatomical_priors_config.py文件

### anatomical_priors_config.py 配置说明

1. 包含多部位扫描的先验知识配置
2. 通过聚类分析生成初始配置
3. 需要专家手工填写解剖标签

### interAccreditation.py 处理流程

1. 读取知识图谱和预处理模板
2. 处理设备间认证或标准化
3. 部位匹配和标准化

## 配置文件说明

### core_protocols.json
核心协议库，定义不同部位的标准扫描序列及其参数要求

### anatomical_priors_config.py
解剖先验知识配置，用于多部位扫描的自动识别和分类

### knowledge_graph/
包含部位知识图谱和特殊检查字典

### parameter_config/
包含系统参数配置

## 使用方法

1. 准备原始MRI数据（CSV或XLSX格式）
2. 运行MR_clean.py进行数据标准化和分类
3. 运行generate_priors.py生成先验知识模板
4. 手工完善anatomical_priors_config.py中的解剖标签（已经自动化）
5. 运行interAccreditation.py进行部位标准化
6. 生成最终分析报告

## 环境要求

- Python 3.x
- 依赖库：pandas, numpy, scikit-learn, flashtext

## 注意事项

1. 输入数据格式限定为 CSV/XLSX
2. 输出HTML报告依赖静态资源
3. 部分处理步骤需要专家人工参与
4. 系统目前未提供错误处理机制和并发处理支持